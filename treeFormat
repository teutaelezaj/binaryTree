//main class
public class binaryTree {
	
	Node root;
	

	public void addNode(int key, String name) {
		Node newNode = new Node(key, name);
		
		if(root == null) {
			root = newNode;
		
		} else {
			
			Node focusNode = root;
			
			Node parent;
			
			while(true) {
				parent = focusNode;
				
				if (key < focusNode.key) {
					
					focusNode = focusNode.leftChild;
					
					if(focusNode == null) {
						
						parent.leftChild = newNode;
						return;
					}
				} else {
					focusNode = focusNode.rightChild;
					
					if(focusNode == null) {
						
						parent.rightChild = newNode;
						return;
					}
				}
			}
		}
	}
	
	
	public void inOrderTransverseTree(Node focusNode) {
		if(focusNode != null) {
			inOrderTransverseTree(focusNode.leftChild);
			
			System.out.println(focusNode);
			
			inOrderTransverseTree(focusNode.rightChild);
		}
	}
	
	
	
	/* pre order transverse
	 * 	public void preOrderTransverseTree(Node focusNode) {
		if(focusNode != null) {
		
			System.out.println(focusNode);
			preOrderTransverseTree(focusNode.leftChild);
			preOrderTransverseTree(focusNode.rightChild);
			
			this will print in order of the tree, in order prints from least to greatest
		}
	}
	
	 *  post order traversal
	 *  public void postOrderTransverseTree(Node focusNode) {
		if(focusNode != null) {
		
			System.out.println(focusNode);
			postOrderTransverseTree(focusNode.leftChild);
			postOrderTransverseTree(focusNode.rightChild);
			
				System.out.println(focusNode);
	 * 
	 */
	
	
	//finding a node
	
	public Node findNode(int key) {
		
		Node focusNode = root;
		
		while(focusNode.key != key) {
			if(key < focusNode.key) { // meaning should we search down the left children
				focusNode = focusNode.leftChild;
			} else {
				focusNode = focusNode.rightChild;
			}
			
			if(focusNode == null)
				return null;
		}
		
		return focusNode;
	}
	
	public static void main(String[]args) {
		
		binaryTree theTree = new binaryTree();
		
		theTree.addNode(50, "Boss");
		theTree.addNode(25, "VP");
		theTree.addNode(15, "Office Manager");
		theTree.addNode(30, "Secretary");
		theTree.addNode(75, "Sales Manager");
		theTree.addNode(85, "Salesman One");
		
		theTree.inOrderTransverseTree(theTree.root);
		
		System.out.println("Search for 30");
		
		System.out.println(theTree.findNode(30));
		
		
	}

}

class Node {
	int key;
	String name;
	
	Node leftChild;
	Node rightChild;
	
	//constructor
	Node(int key, String name){
		
		this.key=key;
		
		this.name=name;
	}
	
	public String toString() {
		
		return name + " has a key " + key;
	}
}
